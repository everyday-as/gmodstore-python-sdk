# coding: utf-8

"""
    GmodStore API

    Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gmodstore-sdk.configuration import Configuration


class AdventCalendarStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'squares_opened': 'int',
        'addons_awarded': 'int',
        'coupons_awarded': 'int'
    }

    attribute_map = {
        'squares_opened': 'squares_opened',
        'addons_awarded': 'addons_awarded',
        'coupons_awarded': 'coupons_awarded'
    }

    def __init__(self, squares_opened=None, addons_awarded=None, coupons_awarded=None, local_vars_configuration=None):  # noqa: E501
        """AdventCalendarStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._squares_opened = None
        self._addons_awarded = None
        self._coupons_awarded = None
        self.discriminator = None

        if squares_opened is not None:
            self.squares_opened = squares_opened
        if addons_awarded is not None:
            self.addons_awarded = addons_awarded
        if coupons_awarded is not None:
            self.coupons_awarded = coupons_awarded

    @property
    def squares_opened(self):
        """Gets the squares_opened of this AdventCalendarStats.  # noqa: E501


        :return: The squares_opened of this AdventCalendarStats.  # noqa: E501
        :rtype: int
        """
        return self._squares_opened

    @squares_opened.setter
    def squares_opened(self, squares_opened):
        """Sets the squares_opened of this AdventCalendarStats.


        :param squares_opened: The squares_opened of this AdventCalendarStats.  # noqa: E501
        :type squares_opened: int
        """

        self._squares_opened = squares_opened

    @property
    def addons_awarded(self):
        """Gets the addons_awarded of this AdventCalendarStats.  # noqa: E501


        :return: The addons_awarded of this AdventCalendarStats.  # noqa: E501
        :rtype: int
        """
        return self._addons_awarded

    @addons_awarded.setter
    def addons_awarded(self, addons_awarded):
        """Sets the addons_awarded of this AdventCalendarStats.


        :param addons_awarded: The addons_awarded of this AdventCalendarStats.  # noqa: E501
        :type addons_awarded: int
        """

        self._addons_awarded = addons_awarded

    @property
    def coupons_awarded(self):
        """Gets the coupons_awarded of this AdventCalendarStats.  # noqa: E501


        :return: The coupons_awarded of this AdventCalendarStats.  # noqa: E501
        :rtype: int
        """
        return self._coupons_awarded

    @coupons_awarded.setter
    def coupons_awarded(self, coupons_awarded):
        """Sets the coupons_awarded of this AdventCalendarStats.


        :param coupons_awarded: The coupons_awarded of this AdventCalendarStats.  # noqa: E501
        :type coupons_awarded: int
        """

        self._coupons_awarded = coupons_awarded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdventCalendarStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdventCalendarStats):
            return True

        return self.to_dict() != other.to_dict()
