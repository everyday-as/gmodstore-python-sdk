# coding: utf-8

"""
    GmodStore API

    Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gmodstore-sdk.configuration import Configuration


class NewAddonVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'changelog': 'str',
        'file': 'file',
        'release_type': 'AddonVersionReleaseType'
    }

    attribute_map = {
        'name': 'name',
        'changelog': 'changelog',
        'file': 'file',
        'release_type': 'release_type'
    }

    def __init__(self, name=None, changelog=None, file=None, release_type=None, local_vars_configuration=None):  # noqa: E501
        """NewAddonVersion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._changelog = None
        self._file = None
        self._release_type = None
        self.discriminator = None

        self.name = name
        self.changelog = changelog
        self.file = file
        if release_type is not None:
            self.release_type = release_type

    @property
    def name(self):
        """Gets the name of this NewAddonVersion.  # noqa: E501


        :return: The name of this NewAddonVersion.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewAddonVersion.


        :param name: The name of this NewAddonVersion.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 80):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def changelog(self):
        """Gets the changelog of this NewAddonVersion.  # noqa: E501

        You can pass in markdown here  # noqa: E501

        :return: The changelog of this NewAddonVersion.  # noqa: E501
        :rtype: str
        """
        return self._changelog

    @changelog.setter
    def changelog(self, changelog):
        """Sets the changelog of this NewAddonVersion.

        You can pass in markdown here  # noqa: E501

        :param changelog: The changelog of this NewAddonVersion.  # noqa: E501
        :type changelog: str
        """
        if self.local_vars_configuration.client_side_validation and changelog is None:  # noqa: E501
            raise ValueError("Invalid value for `changelog`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                changelog is not None and len(changelog) > 10000):
            raise ValueError("Invalid value for `changelog`, length must be less than or equal to `10000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                changelog is not None and len(changelog) < 1):
            raise ValueError("Invalid value for `changelog`, length must be greater than or equal to `1`")  # noqa: E501

        self._changelog = changelog

    @property
    def file(self):
        """Gets the file of this NewAddonVersion.  # noqa: E501


        :return: The file of this NewAddonVersion.  # noqa: E501
        :rtype: file
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this NewAddonVersion.


        :param file: The file of this NewAddonVersion.  # noqa: E501
        :type file: file
        """
        if self.local_vars_configuration.client_side_validation and file is None:  # noqa: E501
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def release_type(self):
        """Gets the release_type of this NewAddonVersion.  # noqa: E501


        :return: The release_type of this NewAddonVersion.  # noqa: E501
        :rtype: AddonVersionReleaseType
        """
        return self._release_type

    @release_type.setter
    def release_type(self, release_type):
        """Sets the release_type of this NewAddonVersion.


        :param release_type: The release_type of this NewAddonVersion.  # noqa: E501
        :type release_type: AddonVersionReleaseType
        """

        self._release_type = release_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewAddonVersion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewAddonVersion):
            return True

        return self.to_dict() != other.to_dict()
