# coding: utf-8

"""
    GmodStore

    Welcome to the Gmodstore API! You can use our API to access Gmodstore API endpoints, which can be used interact with Gmodstore programmatically.  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gmodstore-sdk.configuration import Configuration


class Addon(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'active': 'bool',
        'name': 'str',
        'short_description': 'str',
        'description': 'str',
        'requirements': 'list[str]',
        'price': 'AddonPrice',
        'images': 'AddonImages',
        'slug': 'str',
        'route': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'latest_version': 'AddonVersion',
        'team': 'Team'
    }

    attribute_map = {
        'id': 'id',
        'active': 'active',
        'name': 'name',
        'short_description': 'short_description',
        'description': 'description',
        'requirements': 'requirements',
        'price': 'price',
        'images': 'images',
        'slug': 'slug',
        'route': 'route',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'latest_version': 'latest_version',
        'team': 'team'
    }

    def __init__(self, id=None, active=None, name=None, short_description=None, description=None, requirements=None, price=None, images=None, slug=None, route=None, created_at=None, updated_at=None, latest_version=None, team=None, local_vars_configuration=None):  # noqa: E501
        """Addon - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._active = None
        self._name = None
        self._short_description = None
        self._description = None
        self._requirements = None
        self._price = None
        self._images = None
        self._slug = None
        self._route = None
        self._created_at = None
        self._updated_at = None
        self._latest_version = None
        self._team = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if active is not None:
            self.active = active
        if name is not None:
            self.name = name
        if short_description is not None:
            self.short_description = short_description
        if description is not None:
            self.description = description
        if requirements is not None:
            self.requirements = requirements
        if price is not None:
            self.price = price
        if images is not None:
            self.images = images
        if slug is not None:
            self.slug = slug
        if route is not None:
            self.route = route
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if latest_version is not None:
            self.latest_version = latest_version
        if team is not None:
            self.team = team

    @property
    def id(self):
        """Gets the id of this Addon.  # noqa: E501


        :return: The id of this Addon.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Addon.


        :param id: The id of this Addon.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def active(self):
        """Gets the active of this Addon.  # noqa: E501


        :return: The active of this Addon.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Addon.


        :param active: The active of this Addon.  # noqa: E501
        :type active: bool
        """

        self._active = active

    @property
    def name(self):
        """Gets the name of this Addon.  # noqa: E501


        :return: The name of this Addon.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Addon.


        :param name: The name of this Addon.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def short_description(self):
        """Gets the short_description of this Addon.  # noqa: E501


        :return: The short_description of this Addon.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Addon.


        :param short_description: The short_description of this Addon.  # noqa: E501
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def description(self):
        """Gets the description of this Addon.  # noqa: E501


        :return: The description of this Addon.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Addon.


        :param description: The description of this Addon.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def requirements(self):
        """Gets the requirements of this Addon.  # noqa: E501


        :return: The requirements of this Addon.  # noqa: E501
        :rtype: list[str]
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this Addon.


        :param requirements: The requirements of this Addon.  # noqa: E501
        :type requirements: list[str]
        """

        self._requirements = requirements

    @property
    def price(self):
        """Gets the price of this Addon.  # noqa: E501


        :return: The price of this Addon.  # noqa: E501
        :rtype: AddonPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Addon.


        :param price: The price of this Addon.  # noqa: E501
        :type price: AddonPrice
        """

        self._price = price

    @property
    def images(self):
        """Gets the images of this Addon.  # noqa: E501


        :return: The images of this Addon.  # noqa: E501
        :rtype: AddonImages
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Addon.


        :param images: The images of this Addon.  # noqa: E501
        :type images: AddonImages
        """

        self._images = images

    @property
    def slug(self):
        """Gets the slug of this Addon.  # noqa: E501


        :return: The slug of this Addon.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Addon.


        :param slug: The slug of this Addon.  # noqa: E501
        :type slug: str
        """

        self._slug = slug

    @property
    def route(self):
        """Gets the route of this Addon.  # noqa: E501


        :return: The route of this Addon.  # noqa: E501
        :rtype: str
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this Addon.


        :param route: The route of this Addon.  # noqa: E501
        :type route: str
        """

        self._route = route

    @property
    def created_at(self):
        """Gets the created_at of this Addon.  # noqa: E501


        :return: The created_at of this Addon.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Addon.


        :param created_at: The created_at of this Addon.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Addon.  # noqa: E501


        :return: The updated_at of this Addon.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Addon.


        :param updated_at: The updated_at of this Addon.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def latest_version(self):
        """Gets the latest_version of this Addon.  # noqa: E501


        :return: The latest_version of this Addon.  # noqa: E501
        :rtype: AddonVersion
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this Addon.


        :param latest_version: The latest_version of this Addon.  # noqa: E501
        :type latest_version: AddonVersion
        """

        self._latest_version = latest_version

    @property
    def team(self):
        """Gets the team of this Addon.  # noqa: E501


        :return: The team of this Addon.  # noqa: E501
        :rtype: Team
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Addon.


        :param team: The team of this Addon.  # noqa: E501
        :type team: Team
        """

        self._team = team

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Addon):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Addon):
            return True

        return self.to_dict() != other.to_dict()
