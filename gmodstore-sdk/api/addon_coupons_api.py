"""
    GmodStore API

    Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from gmodstore-sdk.api_client import ApiClient, Endpoint as _Endpoint
from gmodstore-sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from gmodstore-sdk.model.addon_coupon import AddonCoupon
from gmodstore-sdk.model.addon_coupon_list_response import AddonCouponListResponse
from gmodstore-sdk.model.addon_coupon_response import AddonCouponResponse
from gmodstore-sdk.model.error_response import ErrorResponse


class AddonCouponsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_addon_coupon_endpoint = _Endpoint(
            settings={
                'response_type': (AddonCouponResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/addons/{addon_id}/coupons',
                'operation_id': 'create_addon_coupon',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'addon_id',
                    'addon_coupon',
                    '_with',
                ],
                'required': [
                    'addon_id',
                    'addon_coupon',
                ],
                'nullable': [
                ],
                'enum': [
                    '_with',
                ],
                'validation': [
                    '_with',
                ]
            },
            root_map={
                'validations': {
                    ('_with',): {

                    },
                },
                'allowed_values': {
                    ('_with',): {

                        "ADDON": "addon",
                        "BOUND_USER": "bound_user"
                    },
                },
                'openapi_types': {
                    'addon_id':
                        (int,),
                    'addon_coupon':
                        (AddonCoupon,),
                    '_with':
                        ([str],),
                },
                'attribute_map': {
                    'addon_id': 'addon_id',
                    '_with': 'with',
                },
                'location_map': {
                    'addon_id': 'path',
                    'addon_coupon': 'body',
                    '_with': 'query',
                },
                'collection_format_map': {
                    '_with': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_addon_coupon_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/addons/{addon_id}/coupons/{coupon_id}',
                'operation_id': 'delete_addon_coupon',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'addon_id',
                    'coupon_id',
                ],
                'required': [
                    'addon_id',
                    'coupon_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'addon_id':
                        (int,),
                    'coupon_id':
                        (int,),
                },
                'attribute_map': {
                    'addon_id': 'addon_id',
                    'coupon_id': 'coupon_id',
                },
                'location_map': {
                    'addon_id': 'path',
                    'coupon_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_addon_coupon_endpoint = _Endpoint(
            settings={
                'response_type': (AddonCouponResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/addons/{addon_id}/coupons/{coupon_id}',
                'operation_id': 'get_addon_coupon',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'addon_id',
                    'coupon_id',
                    '_with',
                ],
                'required': [
                    'addon_id',
                    'coupon_id',
                ],
                'nullable': [
                ],
                'enum': [
                    '_with',
                ],
                'validation': [
                    '_with',
                ]
            },
            root_map={
                'validations': {
                    ('_with',): {

                    },
                },
                'allowed_values': {
                    ('_with',): {

                        "ADDON": "addon",
                        "BOUND_USER": "bound_user"
                    },
                },
                'openapi_types': {
                    'addon_id':
                        (int,),
                    'coupon_id':
                        (int,),
                    '_with':
                        ([str],),
                },
                'attribute_map': {
                    'addon_id': 'addon_id',
                    'coupon_id': 'coupon_id',
                    '_with': 'with',
                },
                'location_map': {
                    'addon_id': 'path',
                    'coupon_id': 'path',
                    '_with': 'query',
                },
                'collection_format_map': {
                    '_with': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_addon_coupons_endpoint = _Endpoint(
            settings={
                'response_type': (AddonCouponListResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/addons/{addon_id}/coupons',
                'operation_id': 'list_addon_coupons',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'addon_id',
                    '_with',
                ],
                'required': [
                    'addon_id',
                ],
                'nullable': [
                ],
                'enum': [
                    '_with',
                ],
                'validation': [
                    '_with',
                ]
            },
            root_map={
                'validations': {
                    ('_with',): {

                    },
                },
                'allowed_values': {
                    ('_with',): {

                        "ADDON": "addon",
                        "BOUND_USER": "bound_user"
                    },
                },
                'openapi_types': {
                    'addon_id':
                        (int,),
                    '_with':
                        ([str],),
                },
                'attribute_map': {
                    'addon_id': 'addon_id',
                    '_with': 'with',
                },
                'location_map': {
                    'addon_id': 'path',
                    '_with': 'query',
                },
                'collection_format_map': {
                    '_with': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_addon_coupon_endpoint = _Endpoint(
            settings={
                'response_type': (AddonCouponResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/addons/{addon_id}/coupons/{coupon_id}',
                'operation_id': 'update_addon_coupon',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'addon_id',
                    'coupon_id',
                    'addon_coupon',
                    '_with',
                ],
                'required': [
                    'addon_id',
                    'coupon_id',
                    'addon_coupon',
                ],
                'nullable': [
                ],
                'enum': [
                    '_with',
                ],
                'validation': [
                    '_with',
                ]
            },
            root_map={
                'validations': {
                    ('_with',): {

                    },
                },
                'allowed_values': {
                    ('_with',): {

                        "ADDON": "addon",
                        "BOUND_USER": "bound_user"
                    },
                },
                'openapi_types': {
                    'addon_id':
                        (int,),
                    'coupon_id':
                        (int,),
                    'addon_coupon':
                        (AddonCoupon,),
                    '_with':
                        ([str],),
                },
                'attribute_map': {
                    'addon_id': 'addon_id',
                    'coupon_id': 'coupon_id',
                    '_with': 'with',
                },
                'location_map': {
                    'addon_id': 'path',
                    'coupon_id': 'path',
                    'addon_coupon': 'body',
                    '_with': 'query',
                },
                'collection_format_map': {
                    '_with': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_addon_coupon(
        self,
        addon_id,
        addon_coupon,
        **kwargs
    ):
        """Create an addon coupon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_addon_coupon(addon_id, addon_coupon, async_req=True)
        >>> result = thread.get()

        Args:
            addon_id (int): Id of the addon
            addon_coupon (AddonCoupon):

        Keyword Args:
            _with ([str]): The relations you want to fetch with the `AddonCoupon`. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AddonCouponResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['addon_id'] = \
            addon_id
        kwargs['addon_coupon'] = \
            addon_coupon
        return self.create_addon_coupon_endpoint.call_with_http_info(**kwargs)

    def delete_addon_coupon(
        self,
        addon_id,
        coupon_id,
        **kwargs
    ):
        """Destroy an addon's coupon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_addon_coupon(addon_id, coupon_id, async_req=True)
        >>> result = thread.get()

        Args:
            addon_id (int): Id of the addon
            coupon_id (int): Id of the coupon

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['addon_id'] = \
            addon_id
        kwargs['coupon_id'] = \
            coupon_id
        return self.delete_addon_coupon_endpoint.call_with_http_info(**kwargs)

    def get_addon_coupon(
        self,
        addon_id,
        coupon_id,
        **kwargs
    ):
        """Fetch an addon's coupon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_addon_coupon(addon_id, coupon_id, async_req=True)
        >>> result = thread.get()

        Args:
            addon_id (int): Id of the addon
            coupon_id (int): Id of the coupon

        Keyword Args:
            _with ([str]): The relations you want to fetch with the `AddonCoupon`. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AddonCouponResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['addon_id'] = \
            addon_id
        kwargs['coupon_id'] = \
            coupon_id
        return self.get_addon_coupon_endpoint.call_with_http_info(**kwargs)

    def list_addon_coupons(
        self,
        addon_id,
        **kwargs
    ):
        """Fetch all the coupons for an addon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_addon_coupons(addon_id, async_req=True)
        >>> result = thread.get()

        Args:
            addon_id (int): Id of the addon

        Keyword Args:
            _with ([str]): The relations you want to fetch with the `AddonCoupon`. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AddonCouponListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['addon_id'] = \
            addon_id
        return self.list_addon_coupons_endpoint.call_with_http_info(**kwargs)

    def update_addon_coupon(
        self,
        addon_id,
        coupon_id,
        addon_coupon,
        **kwargs
    ):
        """Update an addon's coupon  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_addon_coupon(addon_id, coupon_id, addon_coupon, async_req=True)
        >>> result = thread.get()

        Args:
            addon_id (int): Id of the addon
            coupon_id (int): Id of the coupon
            addon_coupon (AddonCoupon):

        Keyword Args:
            _with ([str]): The relations you want to fetch with the `AddonCoupon`. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AddonCouponResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['addon_id'] = \
            addon_id
        kwargs['coupon_id'] = \
            coupon_id
        kwargs['addon_coupon'] = \
            addon_coupon
        return self.update_addon_coupon_endpoint.call_with_http_info(**kwargs)

