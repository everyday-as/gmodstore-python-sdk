# coding: utf-8

"""
    GmodStore

    Welcome to the Gmodstore API! You can use our API to access Gmodstore API endpoints, which can be used interact with Gmodstore programmatically.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AddonVersionCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'changelog': 'str',
        'file': 'str',
        'release_type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'changelog': 'changelog',
        'file': 'file',
        'release_type': 'release_type'
    }

    def __init__(self, name=None, changelog=None, file=None, release_type=None):  # noqa: E501
        """AddonVersionCreateBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._changelog = None
        self._file = None
        self._release_type = None
        self.discriminator = None
        self.name = name
        self.changelog = changelog
        self.file = file
        if release_type is not None:
            self.release_type = release_type

    @property
    def name(self):
        """Gets the name of this AddonVersionCreateBody.  # noqa: E501


        :return: The name of this AddonVersionCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddonVersionCreateBody.


        :param name: The name of this AddonVersionCreateBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def changelog(self):
        """Gets the changelog of this AddonVersionCreateBody.  # noqa: E501

        You can pass in markdown here   # noqa: E501

        :return: The changelog of this AddonVersionCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._changelog

    @changelog.setter
    def changelog(self, changelog):
        """Sets the changelog of this AddonVersionCreateBody.

        You can pass in markdown here   # noqa: E501

        :param changelog: The changelog of this AddonVersionCreateBody.  # noqa: E501
        :type: str
        """
        if changelog is None:
            raise ValueError("Invalid value for `changelog`, must not be `None`")  # noqa: E501

        self._changelog = changelog

    @property
    def file(self):
        """Gets the file of this AddonVersionCreateBody.  # noqa: E501


        :return: The file of this AddonVersionCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this AddonVersionCreateBody.


        :param file: The file of this AddonVersionCreateBody.  # noqa: E501
        :type: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def release_type(self):
        """Gets the release_type of this AddonVersionCreateBody.  # noqa: E501

        This can be a value of stable, beta, alpha, private or demo   # noqa: E501

        :return: The release_type of this AddonVersionCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._release_type

    @release_type.setter
    def release_type(self, release_type):
        """Sets the release_type of this AddonVersionCreateBody.

        This can be a value of stable, beta, alpha, private or demo   # noqa: E501

        :param release_type: The release_type of this AddonVersionCreateBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["stable", "beta", "alpha", "private", "demo"]  # noqa: E501
        if release_type not in allowed_values:
            raise ValueError(
                "Invalid value for `release_type` ({0}), must be one of {1}"  # noqa: E501
                .format(release_type, allowed_values)
            )

        self._release_type = release_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddonVersionCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddonVersionCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
