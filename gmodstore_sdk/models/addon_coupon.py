# coding: utf-8

"""
    GmodStore

    Welcome to the Gmodstore API! You can use our API to access Gmodstore API endpoints, which can be used interact with Gmodstore programmatically.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AddonCoupon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'code': 'str',
        'percent': 'float',
        'max_uses': 'int',
        'expires_at': 'datetime',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'addon': 'Addon'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'percent': 'percent',
        'max_uses': 'max_uses',
        'expires_at': 'expires_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'addon': 'addon'
    }

    def __init__(self, id=None, code=None, percent=None, max_uses=None, expires_at=None, created_at=None, updated_at=None, addon=None):  # noqa: E501
        """AddonCoupon - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._code = None
        self._percent = None
        self._max_uses = None
        self._expires_at = None
        self._created_at = None
        self._updated_at = None
        self._addon = None
        self.discriminator = None
        self.id = id
        self.code = code
        self.percent = percent
        self.max_uses = max_uses
        self.expires_at = expires_at
        self.created_at = created_at
        self.updated_at = updated_at
        if addon is not None:
            self.addon = addon

    @property
    def id(self):
        """Gets the id of this AddonCoupon.  # noqa: E501


        :return: The id of this AddonCoupon.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AddonCoupon.


        :param id: The id of this AddonCoupon.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def code(self):
        """Gets the code of this AddonCoupon.  # noqa: E501


        :return: The code of this AddonCoupon.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AddonCoupon.


        :param code: The code of this AddonCoupon.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def percent(self):
        """Gets the percent of this AddonCoupon.  # noqa: E501


        :return: The percent of this AddonCoupon.  # noqa: E501
        :rtype: float
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this AddonCoupon.


        :param percent: The percent of this AddonCoupon.  # noqa: E501
        :type: float
        """
        if percent is None:
            raise ValueError("Invalid value for `percent`, must not be `None`")  # noqa: E501

        self._percent = percent

    @property
    def max_uses(self):
        """Gets the max_uses of this AddonCoupon.  # noqa: E501


        :return: The max_uses of this AddonCoupon.  # noqa: E501
        :rtype: int
        """
        return self._max_uses

    @max_uses.setter
    def max_uses(self, max_uses):
        """Sets the max_uses of this AddonCoupon.


        :param max_uses: The max_uses of this AddonCoupon.  # noqa: E501
        :type: int
        """
        if max_uses is None:
            raise ValueError("Invalid value for `max_uses`, must not be `None`")  # noqa: E501

        self._max_uses = max_uses

    @property
    def expires_at(self):
        """Gets the expires_at of this AddonCoupon.  # noqa: E501


        :return: The expires_at of this AddonCoupon.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this AddonCoupon.


        :param expires_at: The expires_at of this AddonCoupon.  # noqa: E501
        :type: datetime
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")  # noqa: E501

        self._expires_at = expires_at

    @property
    def created_at(self):
        """Gets the created_at of this AddonCoupon.  # noqa: E501


        :return: The created_at of this AddonCoupon.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AddonCoupon.


        :param created_at: The created_at of this AddonCoupon.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AddonCoupon.  # noqa: E501


        :return: The updated_at of this AddonCoupon.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AddonCoupon.


        :param updated_at: The updated_at of this AddonCoupon.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def addon(self):
        """Gets the addon of this AddonCoupon.  # noqa: E501


        :return: The addon of this AddonCoupon.  # noqa: E501
        :rtype: Addon
        """
        return self._addon

    @addon.setter
    def addon(self, addon):
        """Sets the addon of this AddonCoupon.


        :param addon: The addon of this AddonCoupon.  # noqa: E501
        :type: Addon
        """

        self._addon = addon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddonCoupon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddonCoupon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
